const { Telegraf } = require("telegraf");
const { message } = require("telegraf/filters");
const { BOT_TOKEN, API_KEY } = require("./config.json");
const { askDeepSeek } = require("./commands/openai.js");
const bot = new Telegraf(BOT_TOKEN);
const { techRequest } = require("./commands/TechEquipment.js");
const { allUsers } = require("./commands/allusers.js");
const { deleteUser } = require("./commands/deleteUser.js");
const { allRequests } = require("./commands/allRequests.js");
const { changeStatus, success } = require("./commands/changeStatus.js");
const webappUrl = "https://incomparable-medovik-4eb827.netlify.app/";
bot.start((ctx) =>
  ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TechExorcist. –û–ø–∏—à–∏ –ø–æ–ª–æ–º–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
  )
);

bot.help((ctx) =>
  ctx.reply(
    "üë®‚Äçü¶Ω/bot - –°–ø—Ä–æ—Å–∏—Ç—å —É –Ω–∞—à–µ–≥–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –¥—Ä—É–≥–∞\nüíº/allRequests - C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\nüßô‚Äç‚ôÇÔ∏è/allusers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\nü¶πüèº‚Äç‚ôÇÔ∏è/deleteUser - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id"
  )
);
bot.command("deleteUser", async (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id)");
  const textHandler = async (ctx) => {
    if (!/^\d+$/.test(ctx.message.text)) {
      return ctx.reply("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
    }

    const data = await deleteUser(ctx.from.id, ctx.message.text.trim());
    await ctx.reply(data);
    bot.off("text", textHandler); // –í–∞–∂–Ω–æ: –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  };

  bot.once("text", textHandler);
});
bot.command("allusers", async (ctx) => {
  const data = await allUsers(ctx.from.id);
  if (typeof data === "string") {
    ctx.reply(data);
  } else {
    Array.from(data).forEach((user) => {
      ctx.reply(
        `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n` +
          `üÜî ID: ${user.id}\n` +
          `üë§ –ò–º—è: ${user.fname || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
          `üë• –§–∞–º–∏–ª–∏—è: ${user.lname || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n` +
          `üí¨ Chat ID: ${user.chat_id}\n` +
          `üé≠ –†–æ–ª—å: ${user.role}\n`
      );
    });
  }
});
bot.command("test", async (ctx) => {
  const testRequest = {
    type_of_device: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
    number: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞",
    status: "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
    chat_id: ctx.from.id,
    type_of_failure: "–°—Ç–∞–ª –æ—á–µ–Ω—å —É–º–Ω—ã–º",
    description: "–ê —á—ë –æ–Ω —É–º–Ω–µ–µ –º–µ–Ω—è",
  };
  const res = await techRequest(testRequest);
  ctx.reply(res[1]);
  res[0][1].forEach((master) => {
    const application = res[0][0];
    bot.telegram.sendMessage(
      master.chat_id,
      `üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${application.id}\n\n` +
        `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${application.type_of_device}\n` +
        `üî¢ –ù–æ–º–µ—Ä: ${application.number}\n` +
        `‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: ${application.type_of_failure}\n` +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${application.description}\n` +
        `üîÑ –°—Ç–∞—Ç—É—Å: ${application.status}`
    );
  });
});
bot.command("allRequests", async (ctx) => {
  try {
    const requests = await allRequests(ctx.from.id);
    if (!requests) {
      return await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫");
    }

    const formatDate = (dateStr) => {
      const date = new Date(dateStr);
      return date.toLocaleString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    };

    if (requests.access?.length > 0) {
      await ctx.reply("üîë *–ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø*", { parse_mode: "Markdown" });

      for (const req of requests.access) {
        await ctx.replyWithHTML(
          `<b>ID:</b> <code>${req.id}</code>\n` +
            `<b>–¢–∏–ø –¥–æ—Å—Ç—É–ø–∞:</b> ${req.access_type}\n` +
            `<b>–û—Ç:</b> ${req.fname} ${req.lname}\n` +
            `<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> ${req.description}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${req.status}\n` +
            `<b>–î–∞—Ç–∞:</b> ${formatDate(req.createdAt)}\n` +
            `<i>Chat ID: ${req.chat_id}</i>`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_access_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_access_${req.id}_${req.status}_${req.chat_id}`,
                  },
                ],
              ],
            },
          }
        );
      }
    } else if ("access" in requests) {
      await ctx.reply("‚ÑπÔ∏è –ó–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–µ—Ç");
    }

    if (requests.tech?.length > 0) {
      await ctx.reply("üõ†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏*", { parse_mode: "Markdown" });

      for (const req of requests.tech) {
        await ctx.replyWithHTML(
          `<b>ID:</b> <code>${req.id}</code>\n` +
            `<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${req.type_of_device}\n` +
            `<b>–ù–æ–º–µ—Ä:</b> ${req.number}\n` +
            `<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> ${req.type_of_failure}\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${req.description}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${req.status}\n` +
            `<b>–î–∞—Ç–∞:</b> ${formatDate(req.createdAt)}\n` +
            `<i>Chat ID: ${req.chat_id}</i>`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_tech_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_tech_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_tech_${req.id}_${req.status}_${req.chat_id}`,
                  },
                ],
              ],
            },
          }
        );
      }
    } else if ("tech" in requests) {
      await ctx.reply("‚ÑπÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç");
    }

    if (requests.network?.length > 0) {
      await ctx.reply("üåê *–°–µ—Ç–µ–≤—ã–µ –∑–∞—è–≤–∫–∏*", { parse_mode: "Markdown" });

      for (const req of requests.network) {
        await ctx.replyWithHTML(
          `<b>ID:</b> <code>${req.id}</code>\n` +
            `<b>–õ–æ–∫–∞—Ü–∏—è:</b> ${req.location}\n` +
            `<b>–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> ${req.connectionType}\n` +
            `<b>–°–∏–º–ø—Ç–æ–º—ã:</b> ${req.signsStr}\n` +
            `<b>–ù–∞—á–∞–ª–æ—Å—å:</b> ${formatDate(req.startTime)}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${req.status}\n` +
            `<b>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</b> ${formatDate(req.createdAt)}\n` +
            `<i>Chat ID: ${req.chat_id}</i>`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_net_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    callback_data: `accept_net_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_net_${req.id}_${req.status}_${req.chat_id}`,
                  },
                ],
              ],
            },
          }
        );
      }
    } else if ("network" in requests) {
      await ctx.reply("‚ÑπÔ∏è –°–µ—Ç–µ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç");
    }

    if (requests.office?.length > 0) {
      await ctx.reply("üõí *–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏*", { parse_mode: "Markdown" });

      for (const req of requests.office) {
        await ctx.replyWithHTML(
          `<b>ID:</b> <code>${req.id}</code>\n` +
            `<b>–¢–æ–≤–∞—Ä:</b> ${req.item}\n` +
            `<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${req.quantity}\n` +
            `<b>–õ–æ–∫–∞—Ü–∏—è:</b> ${req.location}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${req.status}\n` +
            `<b>–î–∞—Ç–∞:</b> ${formatDate(req.createdAt)}\n` +
            `<i>Chat ID: ${req.chat_id}</i>`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_office_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    callback_data: `accept_office_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_office_${req.id}_${req.status}_${req.chat_id}`,
                  },
                ],
              ],
            },
          }
        );
      }
    } else if ("office" in requests) {
      await ctx.reply("‚ÑπÔ∏è –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–µ—Ç");
    }

    if (requests.other?.length > 0) {
      await ctx.reply("üìå *–ü—Ä–æ—á–∏–µ –∑–∞—è–≤–∫–∏*", { parse_mode: "Markdown" });

      for (const req of requests.other) {
        console.log(
          "callback_data:",
          `reject_other_${req.id}_${req.status}_${req.chat_id}`
        );
        await ctx.replyWithHTML(
          `<b>ID:</b> <code>${req.id}</code>\n` +
            `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${req.category}\n` +
            `<b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b> ${req.urgency}\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${req.description}\n` +
            `<b>–°—Ç–∞—Ç—É—Å:</b> ${req.status}\n` +
            `<b>–î–∞—Ç–∞:</b> ${formatDate(req.createdAt)}\n`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_other_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    callback_data: `accept_other_${req.id}_${req.status}_${req.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_other_${req.id}_${req.status}_${req.chat_id}`,
                  },
                ],
              ],
            },
          }
        );
      }
    } else if ("other" in requests) {
      await ctx.reply("‚ÑπÔ∏è –ü—Ä–æ—á–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ allRequests:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
  }
});
bot.command("bot", async (ctx) => {
  await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –¥—Ä—É–≥–∞?");

  try {
    const textHandler = async (ctx) => {
      if (ctx.message.text.startsWith("/")) return;

      const aiResponse = await askDeepSeek(ctx.message.text, API_KEY);
      await ctx.reply(aiResponse, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app: { url: webappUrl } }],
          ],
        },
      });
      bot.off("text", textHandler);
    };
    bot.once("text", textHandler);
  } catch (error) {
    console.error("Error in bot command:", error);
    await ctx.reply("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  }
});
bot.action(
  /^(accept|reject)_(tech|net|office|access|other)_(\d+)_([^_]+)_(\d+)$/,
  async (ctx) => {
    const action = ctx.match[1];
    const type = ctx.match[2];
    const id = ctx.match[3];
    const status = ctx.match[4];
    const chat_id = ctx.match[5];
    console.log(type);
    try {
      let typeForServer;
      switch (type) {
        case "tech":
          typeForServer = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞";
          break;
        case "net":
          typeForServer = "–°–µ—Ç–µ–≤–∞—è –∑–∞—è–≤–∫–∞";
          break;
        case "office":
          typeForServer = "–û—Ñ–∏—Å";
          break;
        case "access":
          typeForServer = "–î–æ—Å—Ç—É–ø";
          break;
        case "other":
          typeForServer = "–î—Ä—É–≥–æ–µ";
          break;
      }

      if (action === "accept") {
        const result = await changeStatus(typeForServer, {
          id,
          status,
          chat_id,
        });

        if (result.success) {
          await ctx.answerCbQuery(result.message);
          await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
          const messageText =
            ctx.update.callback_query.message.text +
            `\n\nüîÑ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ (–ø—Ä–∏–Ω—è—Ç–æ ${ctx.from.first_name})`;
          await ctx.editMessageText(messageText, { parse_mode: "HTML" });
        } else {
          await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`);
        }
      } else {
        const result = await success(typeForServer, { id });

        if (result.success) {
          if (typeForServer === "–î–æ—Å—Ç—É–ø") {
            await ctx.answerCbQuery("‚úÖ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ");
            await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
            const messageText =
              ctx.update.callback_query.message.text +
              `\n\n‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ (${ctx.from.first_name})`;
            await ctx.editMessageText(messageText, { parse_mode: "HTML" });
          } else {
            await ctx.answerCbQuery("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

            const messageText =
              ctx.update.callback_query.message.text +
              `\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ (${ctx.from.first_name})`;
            await ctx.editMessageText(messageText, { parse_mode: "HTML" });
          }
        } else {
          await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`);
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ ${type}-${id}:`, error);
      await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  }
);

bot.on(message("sticker"), (ctx) => ctx.reply("üëç"));

bot.hears("–ü—Ä–∏–≤–µ—Ç", (ctx) => ctx.reply("–ò —Ç–µ–±–µ —Ç–æ–≥–æ –∂–µ"));
bot.launch();
